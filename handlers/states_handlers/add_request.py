import re

from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards.reply_keyboards import reply_kb2
from run import Mr_Butler, bot
from states.request import Request
from datetime import datetime
from utils.all_pattern import telephone_pattern, data_pattern
from utils.time_of_day import check_daytime
from database.sqlite_db import db_table_val


@Mr_Butler.message_handler(lambda message: 'req' in message.text)
async def user_register(message: types.Message):
    await bot.send_photo(message.from_user.id,
                        photo=open('foto/req.png', 'rb'),
                        caption="–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É, –∞ —è –µ–µ –ø–µ—Ä–µ–¥–∞–º –°–µ—Ä–≥–µ—é –≤ —Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—èüòâ\n"
                         "–î–ª—è –Ω–∞—á–∞–ª–∞, –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–í–∞—à–µ –∏–º—è</b> ",
                        parse_mode='html')
    await Request.user_name.set()


# –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
@Mr_Butler.message_handler(state=Request.user_name)
async def get_user_name(message: types.Message, state: FSMContext):
    await state.update_data(user_name=message.text)
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {message.text}!\n"
                               f"–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å <b>—Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>\n\n"
                               f"1. –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É\n"
                               f"2. –ü–æ–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–±—Ä–∞—Ç—å\n"
                               f"3. –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ '–ü—Ä–∏—Å–∏–≤–µ—Å–µ—Ç'\n"
                               f"4. –î—Ä—É–≥–æ–µ\n\n"
                               f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 4",
                               parse_mode='html', reply_markup=reply_kb2)
    await Request.next()

# –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
@Mr_Butler.message_handler(state=Request.req_type)
async def get_req_type(message: types.Message, state: FSMContext):
    if message.text == '1':
        await state.update_data(req_type=message.text)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–≥–¥–∞ –±—ã —Ö–æ—Ç–µ–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è.\n"
                             "–§–æ—Ä–º–∞—Ç: <b>01.01.2023 14:30</b>", parse_mode='html')
        await Request.next()
    elif message.text == '2':
        await state.update_data(req_type=message.text)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8(YYY)XXX XX XX\n"
                             "–ü—Ä–∏–º–µ—Ä: 89991234567", parse_mode='html')
        await Request.next()
    elif message.text == '3':
        await state.update_data(req_type=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
        await Request.next()
    elif message.text == '4':
        await state.update_data(req_type=message.text)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, —è –í—Å–µ –ø–µ—Ä–µ–¥–∞–º –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–≤–∞ –∫ —Å–ª–æ–≤—É!")
        await Request.next()
    else:
        await message.answer('–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –Ω–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 4, '
                             '–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–æ–π —Ç–∏–ø –∑–∞—è–≤–∫–∏ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å. –°–ø–∞—Å–∏–±–æ!')


# –¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
@Mr_Butler.message_handler(state=Request.description)
async def get_description(message: types.Message, state: FSMContext):
        answer = await state.get_data()
        await state.update_data(description=message.text, created_at=datetime.now())
        data = await state.get_data()
        if answer['req_type'] == '1'and re.match(data_pattern, message.text) is not None:
            await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ–¥–∞–º –°–µ—Ä–≥–µ—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è {message.text}.\n{check_daytime()}", parse_mode='html')
            await state.finish()
        elif answer['req_type'] == '1'and re.match(data_pattern, message.text) is None:
            await message.answer(f"{data['user_name']}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞–µ")
        elif answer['req_type'] == '2' and re.match(telephone_pattern, message.text) is not None:
            await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ–¥–∞–º –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n–°–µ—Ä–≥–µ–π –Ω–∞–±–µ—Ä–µ—Ç –í–∞—Å –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è.\n{check_daytime()}")
            await state.finish()
        elif answer['req_type'] == '2' and re.match(telephone_pattern, message.text) is None:
            await message.answer(f"{answer['user_name']}, –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π —è —É–∫–∞–∑–∞–ª –≤—ã—à–µ. –°–ø–∞—Å–∏–±–æ!")
        elif answer['req_type'] == '3':
            await message.answer(f"–ü–µ—Ä–µ–¥–∞–º –í–∞—à —à–∏—Ñ—Ä –°–µ—Ä–≥–µ—é.\n{check_daytime()}")
            await state.finish()
        elif answer['req_type'] == '4':
            await message.answer(f"–•–æ—Ä–æ—à–æ. –ü–µ—Ä–µ–¥–∞–º –í–∞—à –∑–∞–ø—Ä–æ—Å.\n{check_daytime()}'")
            await state.finish()

        db_table_val(user_name=data['user_name'], req_type=data['req_type'], description=data['description'], created_at=data['created_at'])

